
------------------ Bank ----------------------
   struct HouseEdgeSplit {
        uint16 bank;
        uint16 dividend;
        uint16 treasury;
        uint16 team;
        uint256 dividendAmount;
        uint256 partnerAmount;
        uint256 treasuryAmount;
        uint256 teamAmount;
    }

    struct Token {
        bool allowed;
        bool paused;
        uint16 balanceRisk;
        uint64 VRFSubId;
        uint256 minBetAmount;
        uint256 minPartnerTransferAmount;
        HouseEdgeSplit houseEdgeSplit;
        uint256 lpTokenPerToken;
        address lpToken;
        uint256 allocPoint;
        uint256 lastRewardBlock;
        uint256 accEBetPerShare;
    }

    struct UserInfo {
        uint256 amount;
        uint256 rewardDebt;
    }

    EqualBetsToken public eBetToken;
    address public immutable treasury;
    address public teamWallet;
    bytes32 public constant GAME_ROLE = keccak256("GAME_ROLE");
    uint256 public totalAllocPoint = 0;
    uint256 public startBlock;
    uint256 public eBetPerBlock;
    uint256 private _tokensCount;
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;
    mapping(uint256 => address) private _tokensList;
    mapping(address => Token) public tokens;
    address public devaddr;

------------------ Game ----------------------
    struct Bet {
        bool resolved;
        address payable user;
        address token;
        uint256 id;
        uint256 amount;
        uint256 blockNumber;
        uint256 payout;
        uint256 vrfCost;
    }
    struct Token {
        uint16 houseEdge;
        uint64 pendingCount;
        uint32 VRFCallbackGasLimit;
        uint256 VRFFees;
    }
    struct ChainlinkConfig {
        uint16 requestConfirmations;
        uint16 numRandomWords;
        bytes32 keyHash;
        IVRFCoordinatorV2 chainlinkCoordinator;
    }

    ChainlinkConfig private _chainlinkConfig;
    AggregatorV3Interface private immutable _LINK_ETH_feed;
    mapping(uint256 => Bet) public bets;
    mapping(address => uint256[]) internal _userBets;
    mapping(address => Token) public tokens;
    IBank public bank;

------------------ Roulett ----------------------
    struct FullRouletteBet {
        Bet bet;
        RouletteBet rouletteBet;
    }
    struct RouletteBet {
        uint40 numbers;
        uint8 rolled;
    }
    mapping(uint256 => RouletteBet) public rouletteBets;





Game access bank:

IBank public bank;
event SetBank(address bank);
bank = _bank;
if (bank.isAllowedToken(tokenAddress) == false) 
uint256 minBetAmount = bank.getMinBetAmount(tokenAddress);
uint256 maxBetAmount = bank.getMaxBetAmount(tokenAddress, multiplier)
bank.getVRFSubId(tokenAddress),
IERC20(token).transfer(address(bank), betAmountFee)
bank.payout{value: isGasToken ? betAmountFee : 0}(user,token,profitPayout,fee)
IERC20(token).transfer(address(bank), betAmount)
bank.cashIn{value: isGasToken ? betAmount : 0}(token, betAmount)
payable(bank.getTokenOwner(token)).transfer(tokenChainlinkFees);


